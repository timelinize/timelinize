name: Latest builds

on: [workflow_dispatch, push]

jobs:
  Build_and_release:
    env:
      APP_NAME: timelinize
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      # TODO: The Windows Server 2022 runner apparently comes with msys2 installed
      # but I haven't looked into using it. We'd have to install the packages using
      # its shell, but I'm not sure how to do that.
      - name: Install MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          # TODO: Enable this for more current packages, I guess? But it takes longer.
          # update: true
          install: >-
             base-devel
             mingw-w64-x86_64-toolchain
             mingw-w64-x86_64-libvips

      - name: Install libraries (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Install libraries (macOS)
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        run: brew install vips

      # It is crucial to use our gcc compiler instead of the preinstalled gcc,
      # which has an MSYS2 path at c:\msys64. The MSYS2 we installed is at d:\a.
      # (Setting `CC` env var is not enough! You MUST *prepend* the PATH env var!)
      - name: Update PATH (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: echo "D:\a\_temp\msys64\mingw64\bin" >> $GITHUB_PATH

      - name: Compile application
        env:
          CGO_ENABLED: 1
        run: |
          env
          go env
          echo "Building..."
          go build
          echo "Success."
      
      # use conventional archive formats for each platform

      - name: Compress build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export ARTIFACT_NAME="${{ env.APP_NAME }}_${{ github.ref_name }}_linux_x64.tar.gz"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          tar -czvf "$ARTIFACT_NAME" ${{ env.APP_NAME }}

      - name: Compress build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:ARTIFACT_NAME = "${{ env.APP_NAME }}_${{ github.ref_name }}_windows_x64.zip"
          echo "ARTIFACT_NAME=$env:ARTIFACT_NAME" >> $env:GITHUB_ENV
          7z a "$env:ARTIFACT_NAME" ${{ env.APP_NAME }}.exe -r

      - name: Compress build (macOS arm64)
        if: matrix.os == 'macos-latest'
        run: |
          export ARTIFACT_NAME="${{ env.APP_NAME }}_${{ github.ref_name }}_mac_arm64.zip"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          zip "$ARTIFACT_NAME" ${{ env.APP_NAME }}

      - name: Compress build (macOS x64)
        if: matrix.os == 'macos-13'
        run: |
          export ARTIFACT_NAME="${{ env.APP_NAME }}_${{ github.ref_name }}_mac_x64.zip"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          zip "$ARTIFACT_NAME" ${{ env.APP_NAME }}
    
      # always create an artifact so users can conveniently download updated builds to test patches
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}

      # only do releases on tags; if another runner already made the release, we only upload the
      # artifact from this platform to it
      - name: Publish release (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          gh release create --generate-notes --target ${{ github.sha }} "${{ github.ref_name }}" "${{ env.ARTIFACT_NAME }}" \
          || gh release upload "${{ github.ref_name }}" "${{ env.ARTIFACT_NAME }}"
        env:
          GH_TOKEN: ${{ github.token }}